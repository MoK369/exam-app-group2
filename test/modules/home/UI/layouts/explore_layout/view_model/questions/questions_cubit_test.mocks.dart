// Mocks generated by Mockito 5.4.4 from annotations
// in exam_app_group2/test/modules/home/UI/layouts/explore_layout/view_model/questions/questions_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:exam_app_group2/core/api/api_result/api_result.dart' as _i5;
import 'package:exam_app_group2/modules/home/data/models/check_questions/check_questions_request.dart'
    as _i10;
import 'package:exam_app_group2/modules/home/domain/entities/cahed_questions/cashed_questions_entity.dart'
    as _i12;
import 'package:exam_app_group2/modules/home/domain/entities/check_questions_response_entity.dart'
    as _i9;
import 'package:exam_app_group2/modules/home/domain/entities/question_entity.dart'
    as _i6;
import 'package:exam_app_group2/modules/home/domain/repositories_contracts/explore_repository.dart'
    as _i2;
import 'package:exam_app_group2/modules/home/domain/use_cases/check_questions.dart'
    as _i8;
import 'package:exam_app_group2/modules/home/domain/use_cases/get_all_questions.dart'
    as _i3;
import 'package:exam_app_group2/modules/home/domain/use_cases/get_cashed_question.dart'
    as _i13;
import 'package:exam_app_group2/modules/home/domain/use_cases/save_questions.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExploreRepository_0 extends _i1.SmartFake
    implements _i2.ExploreRepository {
  _FakeExploreRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetAllQuestionsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllQuestionsUseCase extends _i1.Mock
    implements _i3.GetAllQuestionsUseCase {
  MockGetAllQuestionsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExploreRepository get homeRepo => (super.noSuchMethod(
        Invocation.getter(#homeRepo),
        returnValue: _FakeExploreRepository_0(
          this,
          Invocation.getter(#homeRepo),
        ),
      ) as _i2.ExploreRepository);

  @override
  _i4.Future<_i5.ApiResult<List<_i6.QuestionEntity>?>> execute(
          {required String? examId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#examId: examId},
        ),
        returnValue: _i4.Future<_i5.ApiResult<List<_i6.QuestionEntity>?>>.value(
            _i7.dummyValue<_i5.ApiResult<List<_i6.QuestionEntity>?>>(
          this,
          Invocation.method(
            #execute,
            [],
            {#examId: examId},
          ),
        )),
      ) as _i4.Future<_i5.ApiResult<List<_i6.QuestionEntity>?>>);
}

/// A class which mocks [CheckQuestionsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckQuestionsUseCase extends _i1.Mock
    implements _i8.CheckQuestionsUseCase {
  MockCheckQuestionsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExploreRepository get homeRepository => (super.noSuchMethod(
        Invocation.getter(#homeRepository),
        returnValue: _FakeExploreRepository_0(
          this,
          Invocation.getter(#homeRepository),
        ),
      ) as _i2.ExploreRepository);

  @override
  set homeRepository(_i2.ExploreRepository? _homeRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #homeRepository,
          _homeRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i5.ApiResult<_i9.CheckQuestionsResponseEntity>> execute(
          {required _i10.CheckQuestionsRequest? checkQuestionRequest}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#checkQuestionRequest: checkQuestionRequest},
        ),
        returnValue:
            _i4.Future<_i5.ApiResult<_i9.CheckQuestionsResponseEntity>>.value(
                _i7.dummyValue<_i5.ApiResult<_i9.CheckQuestionsResponseEntity>>(
          this,
          Invocation.method(
            #execute,
            [],
            {#checkQuestionRequest: checkQuestionRequest},
          ),
        )),
      ) as _i4.Future<_i5.ApiResult<_i9.CheckQuestionsResponseEntity>>);
}

/// A class which mocks [SaveQuestionsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveQuestionsUseCase extends _i1.Mock
    implements _i11.SaveQuestionsUseCase {
  MockSaveQuestionsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExploreRepository get exploreRepository => (super.noSuchMethod(
        Invocation.getter(#exploreRepository),
        returnValue: _FakeExploreRepository_0(
          this,
          Invocation.getter(#exploreRepository),
        ),
      ) as _i2.ExploreRepository);

  @override
  set exploreRepository(_i2.ExploreRepository? _exploreRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #exploreRepository,
          _exploreRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> execute(_i12.CashedQuestions? cashedQuestions) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [cashedQuestions],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [GetCashedQuestionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCashedQuestionUseCase extends _i1.Mock
    implements _i13.GetCashedQuestionUseCase {
  MockGetCashedQuestionUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExploreRepository get exploreRepository => (super.noSuchMethod(
        Invocation.getter(#exploreRepository),
        returnValue: _FakeExploreRepository_0(
          this,
          Invocation.getter(#exploreRepository),
        ),
      ) as _i2.ExploreRepository);

  @override
  set exploreRepository(_i2.ExploreRepository? _exploreRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #exploreRepository,
          _exploreRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<List<_i12.CashedQuestions>?> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i4.Future<List<_i12.CashedQuestions>?>.value(),
      ) as _i4.Future<List<_i12.CashedQuestions>?>);
}
