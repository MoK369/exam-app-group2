// Mocks generated by Mockito 5.4.4 from annotations
// in exam_app_group2/test/modules/home/data/data_source_imp/explore_data_source_imp_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:exam_app_group2/modules/home/data/api_manager/explore_api_manager.dart'
    as _i6;
import 'package:exam_app_group2/modules/home/data/models/all_exams_on_subject_response/get_all_exams_on_subject_response.dart'
    as _i3;
import 'package:exam_app_group2/modules/home/data/models/all_questions_response/get_all_questions_response.dart'
    as _i4;
import 'package:exam_app_group2/modules/home/data/models/all_subjects_response/get_all_subjects_response.dart'
    as _i2;
import 'package:exam_app_group2/modules/home/data/models/check_questions/check_question_response.dart'
    as _i5;
import 'package:exam_app_group2/modules/home/data/models/check_questions/check_questions_request.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetAllSubjectsResponse_0 extends _i1.SmartFake
    implements _i2.GetAllSubjectsResponse {
  _FakeGetAllSubjectsResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetAllExamsOnSubjectResponse_1 extends _i1.SmartFake
    implements _i3.GetAllExamsOnSubjectResponse {
  _FakeGetAllExamsOnSubjectResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetAllQuestionsResponse_2 extends _i1.SmartFake
    implements _i4.GetAllQuestionsResponse {
  _FakeGetAllQuestionsResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCheckQuestionResponse_3 extends _i1.SmartFake
    implements _i5.CheckQuestionResponse {
  _FakeCheckQuestionResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ExploreApiManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockExploreApiManager extends _i1.Mock implements _i6.ExploreApiManager {
  MockExploreApiManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.GetAllSubjectsResponse> getAllSubjects() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllSubjects,
          [],
        ),
        returnValue: _i7.Future<_i2.GetAllSubjectsResponse>.value(
            _FakeGetAllSubjectsResponse_0(
          this,
          Invocation.method(
            #getAllSubjects,
            [],
          ),
        )),
      ) as _i7.Future<_i2.GetAllSubjectsResponse>);

  @override
  _i7.Future<_i3.GetAllExamsOnSubjectResponse> getAllExamsOnSubject(
          {required String? subjectId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllExamsOnSubject,
          [],
          {#subjectId: subjectId},
        ),
        returnValue: _i7.Future<_i3.GetAllExamsOnSubjectResponse>.value(
            _FakeGetAllExamsOnSubjectResponse_1(
          this,
          Invocation.method(
            #getAllExamsOnSubject,
            [],
            {#subjectId: subjectId},
          ),
        )),
      ) as _i7.Future<_i3.GetAllExamsOnSubjectResponse>);

  @override
  _i7.Future<_i4.GetAllQuestionsResponse> getAllQuestions(
          {required String? examId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllQuestions,
          [],
          {#examId: examId},
        ),
        returnValue: _i7.Future<_i4.GetAllQuestionsResponse>.value(
            _FakeGetAllQuestionsResponse_2(
          this,
          Invocation.method(
            #getAllQuestions,
            [],
            {#examId: examId},
          ),
        )),
      ) as _i7.Future<_i4.GetAllQuestionsResponse>);

  @override
  _i7.Future<_i5.CheckQuestionResponse> checkQuestions(
          {required _i8.CheckQuestionsRequest? checkQuestionRequest}) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkQuestions,
          [],
          {#checkQuestionRequest: checkQuestionRequest},
        ),
        returnValue: _i7.Future<_i5.CheckQuestionResponse>.value(
            _FakeCheckQuestionResponse_3(
          this,
          Invocation.method(
            #checkQuestions,
            [],
            {#checkQuestionRequest: checkQuestionRequest},
          ),
        )),
      ) as _i7.Future<_i5.CheckQuestionResponse>);
}
